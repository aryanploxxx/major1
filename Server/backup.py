from flask import Flask, jsonify from flask_cors import CORS from astropy.io import fits import numpy as np import matplotlib.pyplot as plt import io import base64 import os  plt.switch_backend('Agg')  app = Flask(name) CORS(app)  @app.route('/api/years', methods=['GET']) def get_available_years():     try:         base_dir = './AIA_level_1.5'         years = [d for d in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, d))]         return jsonify(years)     except Exception as e:         return jsonify({'error': str(e)}), 500  @app.route('/api/files/', methods=['GET']) def get_files_for_year(year):     try:         year_dir = f'./AIA_level_1.5/{year}'         files = [f for f in os.listdir(year_dir) if f.endswith('.fits')]         return jsonify(files)     except Exception as e:         return jsonify({'error': str(e)}), 500  @app.route('/api/fits-data//', methods=['GET']) def process_fits_data(year, filename):     try:         file_path = f'./AIA_level_1.5/{year}/{filename}'         hdu_list = fits.open(file_path)                  image_data = hdu_list[1].data                  stats = {             'min': float(np.min(image_data)),             'max': float(np.max(image_data)),             'mean': float(np.mean(image_data)),             'stdev': float(np.std(image_data))         }                  plt.figure(figsize=(10, 6))         plt.hist(image_data.flatten(), bins='auto')         plt.title('Pixel Value Distribution')         plt.xlabel('Pixel Value')         plt.ylabel('Frequency')                  hist_buffer = io.BytesIO()         plt.savefig(hist_buffer, format='png')         hist_buffer.seek(0)         hist_base64 = base64.b64encode(hist_buffer.getvalue()).decode()         plt.close()                  normalized_data = ((image_data - np.min(image_data)) /                           (np.max(image_data) - np.min(image_data)) * 255).astype(np.uint8)                  plt.figure(figsize=(10, 10))         plt.imshow(normalized_data, cmap='gray')         plt.colorbar()                  img_buffer = io.BytesIO()         plt.savefig(img_buffer, format='png')         img_buffer.seek(0)         img_base64 = base64.b64encode(img_buffer.getvalue()).decode()         plt.close()                  return jsonify({             'stats': stats,             'histogram': hist_base64,             'image': img_base64         })              except Exception as e:         return jsonify({'error': str(e)}), 500  if name == 'main':     app.run(debug=True)  